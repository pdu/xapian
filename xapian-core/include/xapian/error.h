
/* Warning: This file is generated by ./generate-exceptions - do not modify directly! */
/* Copyright (C) 2003,2004,2006,2007,2008,2009,2011,2015 Olly Betts
 * Copyright (C) 2007 Richard Boulton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 */

#ifndef XAPIAN_INCLUDED_ERROR_H
#define XAPIAN_INCLUDED_ERROR_H

#if !defined XAPIAN_IN_XAPIAN_H && !defined XAPIAN_LIB_BUILD
# error "Never use <xapian/error.h> directly; include <xapian.h> instead."
#endif

#include <string>
#include <xapian/attributes.h>
#include <xapian/visibility.h>

namespace Xapian {

class ErrorHandler;

class XAPIAN_VISIBILITY_DEFAULT Error {
    // ErrorHandler needs to be able to access Error::already_handled.
    friend class ErrorHandler;

    std::string msg;

    std::string context;

    mutable std::string error_string;

    const char * type;

    int my_errno;

    bool already_handled;

    void operator=(const Error &o);

  protected:
    Error(const std::string &msg_, const std::string &context_,
          const char * type_, const char * error_string_);

    Error(const std::string &msg_, const std::string &context_,
          const char * type_, int errno_)
        : msg(msg_), context(context_), error_string(), type(type_),
          my_errno(errno_), already_handled(false) { }

  public:
    const char * XAPIAN_NOTHROW(get_type() const) {
        return type + 1;
    }

    const std::string & XAPIAN_NOTHROW(get_msg() const) {
        return msg;
    }

    const std::string & XAPIAN_NOTHROW(get_context() const) {
        return context;
    }

    const char * get_error_string() const;

    std::string get_description() const;
};

class XAPIAN_VISIBILITY_DEFAULT LogicError : public Error {
  protected:
    LogicError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : Error(msg_, context_, type_, error_string_) {}

    LogicError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : Error(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT RuntimeError : public Error {
  protected:
    RuntimeError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : Error(msg_, context_, type_, error_string_) {}

    RuntimeError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : Error(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT AssertionError : public LogicError {
  public:
    AssertionError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : LogicError(msg_, context_, "\000AssertionError", error_string_) {}
    explicit AssertionError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : LogicError(msg_, context_, "\000AssertionError", errno_) {}
    AssertionError(const std::string &msg_, int errno_)
        : LogicError(msg_, std::string(), "\000AssertionError", errno_) {}
  protected:
    AssertionError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : LogicError(msg_, context_, type_, error_string_) {}

    AssertionError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : LogicError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT InvalidArgumentError : public LogicError {
  public:
    InvalidArgumentError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : LogicError(msg_, context_, "\001InvalidArgumentError", error_string_) {}
    explicit InvalidArgumentError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : LogicError(msg_, context_, "\001InvalidArgumentError", errno_) {}
    InvalidArgumentError(const std::string &msg_, int errno_)
        : LogicError(msg_, std::string(), "\001InvalidArgumentError", errno_) {}
  protected:
    InvalidArgumentError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : LogicError(msg_, context_, type_, error_string_) {}

    InvalidArgumentError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : LogicError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT InvalidOperationError : public LogicError {
  public:
    InvalidOperationError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : LogicError(msg_, context_, "\002InvalidOperationError", error_string_) {}
    explicit InvalidOperationError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : LogicError(msg_, context_, "\002InvalidOperationError", errno_) {}
    InvalidOperationError(const std::string &msg_, int errno_)
        : LogicError(msg_, std::string(), "\002InvalidOperationError", errno_) {}
  protected:
    InvalidOperationError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : LogicError(msg_, context_, type_, error_string_) {}

    InvalidOperationError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : LogicError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT UnimplementedError : public LogicError {
  public:
    UnimplementedError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : LogicError(msg_, context_, "\003UnimplementedError", error_string_) {}
    explicit UnimplementedError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : LogicError(msg_, context_, "\003UnimplementedError", errno_) {}
    UnimplementedError(const std::string &msg_, int errno_)
        : LogicError(msg_, std::string(), "\003UnimplementedError", errno_) {}
  protected:
    UnimplementedError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : LogicError(msg_, context_, type_, error_string_) {}

    UnimplementedError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : LogicError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT DatabaseError : public RuntimeError {
  public:
    DatabaseError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : RuntimeError(msg_, context_, "\004DatabaseError", error_string_) {}
    explicit DatabaseError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : RuntimeError(msg_, context_, "\004DatabaseError", errno_) {}
    DatabaseError(const std::string &msg_, int errno_)
        : RuntimeError(msg_, std::string(), "\004DatabaseError", errno_) {}
  protected:
    DatabaseError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : RuntimeError(msg_, context_, type_, error_string_) {}

    DatabaseError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : RuntimeError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT DatabaseCorruptError : public DatabaseError {
  public:
    DatabaseCorruptError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : DatabaseError(msg_, context_, "\005DatabaseCorruptError", error_string_) {}
    explicit DatabaseCorruptError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : DatabaseError(msg_, context_, "\005DatabaseCorruptError", errno_) {}
    DatabaseCorruptError(const std::string &msg_, int errno_)
        : DatabaseError(msg_, std::string(), "\005DatabaseCorruptError", errno_) {}
  protected:
    DatabaseCorruptError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : DatabaseError(msg_, context_, type_, error_string_) {}

    DatabaseCorruptError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : DatabaseError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT DatabaseCreateError : public DatabaseError {
  public:
    DatabaseCreateError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : DatabaseError(msg_, context_, "\006DatabaseCreateError", error_string_) {}
    explicit DatabaseCreateError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : DatabaseError(msg_, context_, "\006DatabaseCreateError", errno_) {}
    DatabaseCreateError(const std::string &msg_, int errno_)
        : DatabaseError(msg_, std::string(), "\006DatabaseCreateError", errno_) {}
  protected:
    DatabaseCreateError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : DatabaseError(msg_, context_, type_, error_string_) {}

    DatabaseCreateError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : DatabaseError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT DatabaseLockError : public DatabaseError {
  public:
    DatabaseLockError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : DatabaseError(msg_, context_, "\007DatabaseLockError", error_string_) {}
    explicit DatabaseLockError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : DatabaseError(msg_, context_, "\007DatabaseLockError", errno_) {}
    DatabaseLockError(const std::string &msg_, int errno_)
        : DatabaseError(msg_, std::string(), "\007DatabaseLockError", errno_) {}
  protected:
    DatabaseLockError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : DatabaseError(msg_, context_, type_, error_string_) {}

    DatabaseLockError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : DatabaseError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT DatabaseModifiedError : public DatabaseError {
  public:
    DatabaseModifiedError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : DatabaseError(msg_, context_, "\010DatabaseModifiedError", error_string_) {}
    explicit DatabaseModifiedError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : DatabaseError(msg_, context_, "\010DatabaseModifiedError", errno_) {}
    DatabaseModifiedError(const std::string &msg_, int errno_)
        : DatabaseError(msg_, std::string(), "\010DatabaseModifiedError", errno_) {}
  protected:
    DatabaseModifiedError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : DatabaseError(msg_, context_, type_, error_string_) {}

    DatabaseModifiedError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : DatabaseError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT DatabaseOpeningError : public DatabaseError {
  public:
    DatabaseOpeningError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : DatabaseError(msg_, context_, "\011DatabaseOpeningError", error_string_) {}
    explicit DatabaseOpeningError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : DatabaseError(msg_, context_, "\011DatabaseOpeningError", errno_) {}
    DatabaseOpeningError(const std::string &msg_, int errno_)
        : DatabaseError(msg_, std::string(), "\011DatabaseOpeningError", errno_) {}
  protected:
    DatabaseOpeningError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : DatabaseError(msg_, context_, type_, error_string_) {}

    DatabaseOpeningError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : DatabaseError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT DatabaseVersionError : public DatabaseOpeningError {
  public:
    DatabaseVersionError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : DatabaseOpeningError(msg_, context_, "\012DatabaseVersionError", error_string_) {}
    explicit DatabaseVersionError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : DatabaseOpeningError(msg_, context_, "\012DatabaseVersionError", errno_) {}
    DatabaseVersionError(const std::string &msg_, int errno_)
        : DatabaseOpeningError(msg_, std::string(), "\012DatabaseVersionError", errno_) {}
  protected:
    DatabaseVersionError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : DatabaseOpeningError(msg_, context_, type_, error_string_) {}

    DatabaseVersionError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : DatabaseOpeningError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT DocNotFoundError : public RuntimeError {
  public:
    DocNotFoundError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : RuntimeError(msg_, context_, "\013DocNotFoundError", error_string_) {}
    explicit DocNotFoundError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : RuntimeError(msg_, context_, "\013DocNotFoundError", errno_) {}
    DocNotFoundError(const std::string &msg_, int errno_)
        : RuntimeError(msg_, std::string(), "\013DocNotFoundError", errno_) {}
  protected:
    DocNotFoundError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : RuntimeError(msg_, context_, type_, error_string_) {}

    DocNotFoundError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : RuntimeError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT FeatureUnavailableError : public RuntimeError {
  public:
    FeatureUnavailableError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : RuntimeError(msg_, context_, "\014FeatureUnavailableError", error_string_) {}
    explicit FeatureUnavailableError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : RuntimeError(msg_, context_, "\014FeatureUnavailableError", errno_) {}
    FeatureUnavailableError(const std::string &msg_, int errno_)
        : RuntimeError(msg_, std::string(), "\014FeatureUnavailableError", errno_) {}
  protected:
    FeatureUnavailableError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : RuntimeError(msg_, context_, type_, error_string_) {}

    FeatureUnavailableError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : RuntimeError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT InternalError : public RuntimeError {
  public:
    InternalError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : RuntimeError(msg_, context_, "\015InternalError", error_string_) {}
    explicit InternalError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : RuntimeError(msg_, context_, "\015InternalError", errno_) {}
    InternalError(const std::string &msg_, int errno_)
        : RuntimeError(msg_, std::string(), "\015InternalError", errno_) {}
  protected:
    InternalError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : RuntimeError(msg_, context_, type_, error_string_) {}

    InternalError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : RuntimeError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT NetworkError : public RuntimeError {
  public:
    NetworkError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : RuntimeError(msg_, context_, "\016NetworkError", error_string_) {}
    explicit NetworkError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : RuntimeError(msg_, context_, "\016NetworkError", errno_) {}
    NetworkError(const std::string &msg_, int errno_)
        : RuntimeError(msg_, std::string(), "\016NetworkError", errno_) {}
  protected:
    NetworkError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : RuntimeError(msg_, context_, type_, error_string_) {}

    NetworkError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : RuntimeError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT NetworkTimeoutError : public NetworkError {
  public:
    NetworkTimeoutError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : NetworkError(msg_, context_, "\017NetworkTimeoutError", error_string_) {}
    explicit NetworkTimeoutError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : NetworkError(msg_, context_, "\017NetworkTimeoutError", errno_) {}
    NetworkTimeoutError(const std::string &msg_, int errno_)
        : NetworkError(msg_, std::string(), "\017NetworkTimeoutError", errno_) {}
  protected:
    NetworkTimeoutError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : NetworkError(msg_, context_, type_, error_string_) {}

    NetworkTimeoutError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : NetworkError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT QueryParserError : public RuntimeError {
  public:
    QueryParserError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : RuntimeError(msg_, context_, "\020QueryParserError", error_string_) {}
    explicit QueryParserError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : RuntimeError(msg_, context_, "\020QueryParserError", errno_) {}
    QueryParserError(const std::string &msg_, int errno_)
        : RuntimeError(msg_, std::string(), "\020QueryParserError", errno_) {}
  protected:
    QueryParserError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : RuntimeError(msg_, context_, type_, error_string_) {}

    QueryParserError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : RuntimeError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT SerialisationError : public RuntimeError {
  public:
    SerialisationError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : RuntimeError(msg_, context_, "\021SerialisationError", error_string_) {}
    explicit SerialisationError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : RuntimeError(msg_, context_, "\021SerialisationError", errno_) {}
    SerialisationError(const std::string &msg_, int errno_)
        : RuntimeError(msg_, std::string(), "\021SerialisationError", errno_) {}
  protected:
    SerialisationError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : RuntimeError(msg_, context_, type_, error_string_) {}

    SerialisationError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : RuntimeError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT RangeError : public RuntimeError {
  public:
    RangeError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : RuntimeError(msg_, context_, "\022RangeError", error_string_) {}
    explicit RangeError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : RuntimeError(msg_, context_, "\022RangeError", errno_) {}
    RangeError(const std::string &msg_, int errno_)
        : RuntimeError(msg_, std::string(), "\022RangeError", errno_) {}
  protected:
    RangeError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : RuntimeError(msg_, context_, type_, error_string_) {}

    RangeError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : RuntimeError(msg_, context_, type_, errno_) {}
};

class XAPIAN_VISIBILITY_DEFAULT WildcardError : public RuntimeError {
  public:
    WildcardError(const std::string &msg_, const std::string &context_, const char * error_string_)
        : RuntimeError(msg_, context_, "\023WildcardError", error_string_) {}
    explicit WildcardError(const std::string &msg_, const std::string &context_ = std::string(), int errno_ = 0)
        : RuntimeError(msg_, context_, "\023WildcardError", errno_) {}
    WildcardError(const std::string &msg_, int errno_)
        : RuntimeError(msg_, std::string(), "\023WildcardError", errno_) {}
  protected:
    WildcardError(const std::string &msg_, const std::string &context_, const char * type_, const char * error_string_)
        : RuntimeError(msg_, context_, type_, error_string_) {}

    WildcardError(const std::string &msg_, const std::string &context_, const char * type_, int errno_)
        : RuntimeError(msg_, context_, type_, errno_) {}
};

}

#endif /* XAPIAN_INCLUDED_ERROR_H */
